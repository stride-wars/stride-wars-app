// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"stride-wars-app/ent/hex"
	"stride-wars-app/ent/hexinfluence"
	"stride-wars-app/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// HexInfluence is the model entity for the HexInfluence schema.
type HexInfluence struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// H3Index holds the value of the "h3_index" field.
	H3Index int64 `json:"h3_index,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// Score holds the value of the "score" field.
	Score float64 `json:"score,omitempty"`
	// LastUpdated holds the value of the "last_updated" field.
	LastUpdated time.Time `json:"last_updated,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the HexInfluenceQuery when eager-loading is set.
	Edges        HexInfluenceEdges `json:"edges"`
	selectValues sql.SelectValues
}

// HexInfluenceEdges holds the relations/edges for other nodes in the graph.
type HexInfluenceEdges struct {
	// Hex holds the value of the hex edge.
	Hex *Hex `json:"hex,omitempty"`
	// Users holds the value of the users edge.
	Users *User `json:"users,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// HexOrErr returns the Hex value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HexInfluenceEdges) HexOrErr() (*Hex, error) {
	if e.Hex != nil {
		return e.Hex, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: hex.Label}
	}
	return nil, &NotLoadedError{edge: "hex"}
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HexInfluenceEdges) UsersOrErr() (*User, error) {
	if e.Users != nil {
		return e.Users, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "users"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*HexInfluence) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case hexinfluence.FieldScore:
			values[i] = new(sql.NullFloat64)
		case hexinfluence.FieldH3Index:
			values[i] = new(sql.NullInt64)
		case hexinfluence.FieldLastUpdated:
			values[i] = new(sql.NullTime)
		case hexinfluence.FieldID, hexinfluence.FieldUserID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the HexInfluence fields.
func (hi *HexInfluence) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case hexinfluence.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				hi.ID = *value
			}
		case hexinfluence.FieldH3Index:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field h3_index", values[i])
			} else if value.Valid {
				hi.H3Index = value.Int64
			}
		case hexinfluence.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				hi.UserID = *value
			}
		case hexinfluence.FieldScore:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field score", values[i])
			} else if value.Valid {
				hi.Score = value.Float64
			}
		case hexinfluence.FieldLastUpdated:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_updated", values[i])
			} else if value.Valid {
				hi.LastUpdated = value.Time
			}
		default:
			hi.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the HexInfluence.
// This includes values selected through modifiers, order, etc.
func (hi *HexInfluence) Value(name string) (ent.Value, error) {
	return hi.selectValues.Get(name)
}

// QueryHex queries the "hex" edge of the HexInfluence entity.
func (hi *HexInfluence) QueryHex() *HexQuery {
	return NewHexInfluenceClient(hi.config).QueryHex(hi)
}

// QueryUsers queries the "users" edge of the HexInfluence entity.
func (hi *HexInfluence) QueryUsers() *UserQuery {
	return NewHexInfluenceClient(hi.config).QueryUsers(hi)
}

// Update returns a builder for updating this HexInfluence.
// Note that you need to call HexInfluence.Unwrap() before calling this method if this HexInfluence
// was returned from a transaction, and the transaction was committed or rolled back.
func (hi *HexInfluence) Update() *HexInfluenceUpdateOne {
	return NewHexInfluenceClient(hi.config).UpdateOne(hi)
}

// Unwrap unwraps the HexInfluence entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (hi *HexInfluence) Unwrap() *HexInfluence {
	_tx, ok := hi.config.driver.(*txDriver)
	if !ok {
		panic("ent: HexInfluence is not a transactional entity")
	}
	hi.config.driver = _tx.drv
	return hi
}

// String implements the fmt.Stringer.
func (hi *HexInfluence) String() string {
	var builder strings.Builder
	builder.WriteString("HexInfluence(")
	builder.WriteString(fmt.Sprintf("id=%v, ", hi.ID))
	builder.WriteString("h3_index=")
	builder.WriteString(fmt.Sprintf("%v", hi.H3Index))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", hi.UserID))
	builder.WriteString(", ")
	builder.WriteString("score=")
	builder.WriteString(fmt.Sprintf("%v", hi.Score))
	builder.WriteString(", ")
	builder.WriteString("last_updated=")
	builder.WriteString(hi.LastUpdated.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// HexInfluences is a parsable slice of HexInfluence.
type HexInfluences []*HexInfluence
