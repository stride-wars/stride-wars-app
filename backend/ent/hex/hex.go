// Code generated by ent, DO NOT EDIT.

package hex

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the hex type in the database.
	Label = "hex"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// EdgeHexinfluences holds the string denoting the hexinfluences edge name in mutations.
	EdgeHexinfluences = "hexinfluences"
	// EdgeHexleaderboards holds the string denoting the hexleaderboards edge name in mutations.
	EdgeHexleaderboards = "hexleaderboards"
	// Table holds the table name of the hex in the database.
	Table = "hexes"
	// HexinfluencesTable is the table that holds the hexinfluences relation/edge.
	HexinfluencesTable = "hex_influences"
	// HexinfluencesInverseTable is the table name for the HexInfluence entity.
	// It exists in this package in order to avoid circular dependency with the "hexinfluence" package.
	HexinfluencesInverseTable = "hex_influences"
	// HexinfluencesColumn is the table column denoting the hexinfluences relation/edge.
	HexinfluencesColumn = "h3_index"
	// HexleaderboardsTable is the table that holds the hexleaderboards relation/edge.
	HexleaderboardsTable = "hex_leaderboards"
	// HexleaderboardsInverseTable is the table name for the HexLeaderboard entity.
	// It exists in this package in order to avoid circular dependency with the "hexleaderboard" package.
	HexleaderboardsInverseTable = "hex_leaderboards"
	// HexleaderboardsColumn is the table column denoting the hexleaderboards relation/edge.
	HexleaderboardsColumn = "h3_index"
)

// Columns holds all SQL columns for hex fields.
var Columns = []string{
	FieldID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Hex queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByHexinfluencesCount orders the results by hexinfluences count.
func ByHexinfluencesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newHexinfluencesStep(), opts...)
	}
}

// ByHexinfluences orders the results by hexinfluences terms.
func ByHexinfluences(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHexinfluencesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByHexleaderboardsCount orders the results by hexleaderboards count.
func ByHexleaderboardsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newHexleaderboardsStep(), opts...)
	}
}

// ByHexleaderboards orders the results by hexleaderboards terms.
func ByHexleaderboards(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHexleaderboardsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newHexinfluencesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HexinfluencesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, HexinfluencesTable, HexinfluencesColumn),
	)
}
func newHexleaderboardsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HexleaderboardsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, HexleaderboardsTable, HexleaderboardsColumn),
	)
}
