// Code generated by ent, DO NOT EDIT.

package hex

import (
	"stride-wars-app/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Hex {
	return predicate.Hex(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Hex {
	return predicate.Hex(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Hex {
	return predicate.Hex(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Hex {
	return predicate.Hex(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Hex {
	return predicate.Hex(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Hex {
	return predicate.Hex(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Hex {
	return predicate.Hex(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Hex {
	return predicate.Hex(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Hex {
	return predicate.Hex(sql.FieldLTE(FieldID, id))
}

// HexOwner applies equality check predicate on the "hex_owner" field. It's identical to HexOwnerEQ.
func HexOwner(v int64) predicate.Hex {
	return predicate.Hex(sql.FieldEQ(FieldHexOwner, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Hex {
	return predicate.Hex(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Hex {
	return predicate.Hex(sql.FieldEQ(FieldUpdatedAt, v))
}

// IsActive applies equality check predicate on the "is_active" field. It's identical to IsActiveEQ.
func IsActive(v bool) predicate.Hex {
	return predicate.Hex(sql.FieldEQ(FieldIsActive, v))
}

// HexOwnerEQ applies the EQ predicate on the "hex_owner" field.
func HexOwnerEQ(v int64) predicate.Hex {
	return predicate.Hex(sql.FieldEQ(FieldHexOwner, v))
}

// HexOwnerNEQ applies the NEQ predicate on the "hex_owner" field.
func HexOwnerNEQ(v int64) predicate.Hex {
	return predicate.Hex(sql.FieldNEQ(FieldHexOwner, v))
}

// HexOwnerIn applies the In predicate on the "hex_owner" field.
func HexOwnerIn(vs ...int64) predicate.Hex {
	return predicate.Hex(sql.FieldIn(FieldHexOwner, vs...))
}

// HexOwnerNotIn applies the NotIn predicate on the "hex_owner" field.
func HexOwnerNotIn(vs ...int64) predicate.Hex {
	return predicate.Hex(sql.FieldNotIn(FieldHexOwner, vs...))
}

// HexOwnerGT applies the GT predicate on the "hex_owner" field.
func HexOwnerGT(v int64) predicate.Hex {
	return predicate.Hex(sql.FieldGT(FieldHexOwner, v))
}

// HexOwnerGTE applies the GTE predicate on the "hex_owner" field.
func HexOwnerGTE(v int64) predicate.Hex {
	return predicate.Hex(sql.FieldGTE(FieldHexOwner, v))
}

// HexOwnerLT applies the LT predicate on the "hex_owner" field.
func HexOwnerLT(v int64) predicate.Hex {
	return predicate.Hex(sql.FieldLT(FieldHexOwner, v))
}

// HexOwnerLTE applies the LTE predicate on the "hex_owner" field.
func HexOwnerLTE(v int64) predicate.Hex {
	return predicate.Hex(sql.FieldLTE(FieldHexOwner, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Hex {
	return predicate.Hex(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Hex {
	return predicate.Hex(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Hex {
	return predicate.Hex(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Hex {
	return predicate.Hex(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Hex {
	return predicate.Hex(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Hex {
	return predicate.Hex(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Hex {
	return predicate.Hex(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Hex {
	return predicate.Hex(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Hex {
	return predicate.Hex(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Hex {
	return predicate.Hex(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Hex {
	return predicate.Hex(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Hex {
	return predicate.Hex(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Hex {
	return predicate.Hex(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Hex {
	return predicate.Hex(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Hex {
	return predicate.Hex(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Hex {
	return predicate.Hex(sql.FieldLTE(FieldUpdatedAt, v))
}

// IsActiveEQ applies the EQ predicate on the "is_active" field.
func IsActiveEQ(v bool) predicate.Hex {
	return predicate.Hex(sql.FieldEQ(FieldIsActive, v))
}

// IsActiveNEQ applies the NEQ predicate on the "is_active" field.
func IsActiveNEQ(v bool) predicate.Hex {
	return predicate.Hex(sql.FieldNEQ(FieldIsActive, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Hex) predicate.Hex {
	return predicate.Hex(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Hex) predicate.Hex {
	return predicate.Hex(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Hex) predicate.Hex {
	return predicate.Hex(sql.NotPredicates(p))
}
