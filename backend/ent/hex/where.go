// Code generated by ent, DO NOT EDIT.

package hex

import (
	"stride-wars-app/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Hex {
	return predicate.Hex(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Hex {
	return predicate.Hex(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Hex {
	return predicate.Hex(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Hex {
	return predicate.Hex(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Hex {
	return predicate.Hex(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Hex {
	return predicate.Hex(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Hex {
	return predicate.Hex(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Hex {
	return predicate.Hex(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Hex {
	return predicate.Hex(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Hex {
	return predicate.Hex(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Hex {
	return predicate.Hex(sql.FieldContainsFold(FieldID, id))
}

// HasHexinfluences applies the HasEdge predicate on the "hexinfluences" edge.
func HasHexinfluences() predicate.Hex {
	return predicate.Hex(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, HexinfluencesTable, HexinfluencesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHexinfluencesWith applies the HasEdge predicate on the "hexinfluences" edge with a given conditions (other predicates).
func HasHexinfluencesWith(preds ...predicate.HexInfluence) predicate.Hex {
	return predicate.Hex(func(s *sql.Selector) {
		step := newHexinfluencesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasHexleaderboards applies the HasEdge predicate on the "hexleaderboards" edge.
func HasHexleaderboards() predicate.Hex {
	return predicate.Hex(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, HexleaderboardsTable, HexleaderboardsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHexleaderboardsWith applies the HasEdge predicate on the "hexleaderboards" edge with a given conditions (other predicates).
func HasHexleaderboardsWith(preds ...predicate.HexLeaderboard) predicate.Hex {
	return predicate.Hex(func(s *sql.Selector) {
		step := newHexleaderboardsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Hex) predicate.Hex {
	return predicate.Hex(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Hex) predicate.Hex {
	return predicate.Hex(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Hex) predicate.Hex {
	return predicate.Hex(sql.NotPredicates(p))
}
