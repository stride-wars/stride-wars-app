// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"stride-wars-app/ent/hex"
	"stride-wars-app/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// HexUpdate is the builder for updating Hex entities.
type HexUpdate struct {
	config
	hooks    []Hook
	mutation *HexMutation
}

// Where appends a list predicates to the HexUpdate builder.
func (hu *HexUpdate) Where(ps ...predicate.Hex) *HexUpdate {
	hu.mutation.Where(ps...)
	return hu
}

// SetHexOwner sets the "hex_owner" field.
func (hu *HexUpdate) SetHexOwner(i int64) *HexUpdate {
	hu.mutation.ResetHexOwner()
	hu.mutation.SetHexOwner(i)
	return hu
}

// SetNillableHexOwner sets the "hex_owner" field if the given value is not nil.
func (hu *HexUpdate) SetNillableHexOwner(i *int64) *HexUpdate {
	if i != nil {
		hu.SetHexOwner(*i)
	}
	return hu
}

// AddHexOwner adds i to the "hex_owner" field.
func (hu *HexUpdate) AddHexOwner(i int64) *HexUpdate {
	hu.mutation.AddHexOwner(i)
	return hu
}

// SetCreatedAt sets the "created_at" field.
func (hu *HexUpdate) SetCreatedAt(t time.Time) *HexUpdate {
	hu.mutation.SetCreatedAt(t)
	return hu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (hu *HexUpdate) SetNillableCreatedAt(t *time.Time) *HexUpdate {
	if t != nil {
		hu.SetCreatedAt(*t)
	}
	return hu
}

// SetUpdatedAt sets the "updated_at" field.
func (hu *HexUpdate) SetUpdatedAt(t time.Time) *HexUpdate {
	hu.mutation.SetUpdatedAt(t)
	return hu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (hu *HexUpdate) SetNillableUpdatedAt(t *time.Time) *HexUpdate {
	if t != nil {
		hu.SetUpdatedAt(*t)
	}
	return hu
}

// SetIsActive sets the "is_active" field.
func (hu *HexUpdate) SetIsActive(b bool) *HexUpdate {
	hu.mutation.SetIsActive(b)
	return hu
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (hu *HexUpdate) SetNillableIsActive(b *bool) *HexUpdate {
	if b != nil {
		hu.SetIsActive(*b)
	}
	return hu
}

// Mutation returns the HexMutation object of the builder.
func (hu *HexUpdate) Mutation() *HexMutation {
	return hu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hu *HexUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, hu.sqlSave, hu.mutation, hu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hu *HexUpdate) SaveX(ctx context.Context) int {
	affected, err := hu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hu *HexUpdate) Exec(ctx context.Context) error {
	_, err := hu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hu *HexUpdate) ExecX(ctx context.Context) {
	if err := hu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (hu *HexUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(hex.Table, hex.Columns, sqlgraph.NewFieldSpec(hex.FieldID, field.TypeInt))
	if ps := hu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hu.mutation.HexOwner(); ok {
		_spec.SetField(hex.FieldHexOwner, field.TypeInt64, value)
	}
	if value, ok := hu.mutation.AddedHexOwner(); ok {
		_spec.AddField(hex.FieldHexOwner, field.TypeInt64, value)
	}
	if value, ok := hu.mutation.CreatedAt(); ok {
		_spec.SetField(hex.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := hu.mutation.UpdatedAt(); ok {
		_spec.SetField(hex.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := hu.mutation.IsActive(); ok {
		_spec.SetField(hex.FieldIsActive, field.TypeBool, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hex.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	hu.mutation.done = true
	return n, nil
}

// HexUpdateOne is the builder for updating a single Hex entity.
type HexUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HexMutation
}

// SetHexOwner sets the "hex_owner" field.
func (huo *HexUpdateOne) SetHexOwner(i int64) *HexUpdateOne {
	huo.mutation.ResetHexOwner()
	huo.mutation.SetHexOwner(i)
	return huo
}

// SetNillableHexOwner sets the "hex_owner" field if the given value is not nil.
func (huo *HexUpdateOne) SetNillableHexOwner(i *int64) *HexUpdateOne {
	if i != nil {
		huo.SetHexOwner(*i)
	}
	return huo
}

// AddHexOwner adds i to the "hex_owner" field.
func (huo *HexUpdateOne) AddHexOwner(i int64) *HexUpdateOne {
	huo.mutation.AddHexOwner(i)
	return huo
}

// SetCreatedAt sets the "created_at" field.
func (huo *HexUpdateOne) SetCreatedAt(t time.Time) *HexUpdateOne {
	huo.mutation.SetCreatedAt(t)
	return huo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (huo *HexUpdateOne) SetNillableCreatedAt(t *time.Time) *HexUpdateOne {
	if t != nil {
		huo.SetCreatedAt(*t)
	}
	return huo
}

// SetUpdatedAt sets the "updated_at" field.
func (huo *HexUpdateOne) SetUpdatedAt(t time.Time) *HexUpdateOne {
	huo.mutation.SetUpdatedAt(t)
	return huo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (huo *HexUpdateOne) SetNillableUpdatedAt(t *time.Time) *HexUpdateOne {
	if t != nil {
		huo.SetUpdatedAt(*t)
	}
	return huo
}

// SetIsActive sets the "is_active" field.
func (huo *HexUpdateOne) SetIsActive(b bool) *HexUpdateOne {
	huo.mutation.SetIsActive(b)
	return huo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (huo *HexUpdateOne) SetNillableIsActive(b *bool) *HexUpdateOne {
	if b != nil {
		huo.SetIsActive(*b)
	}
	return huo
}

// Mutation returns the HexMutation object of the builder.
func (huo *HexUpdateOne) Mutation() *HexMutation {
	return huo.mutation
}

// Where appends a list predicates to the HexUpdate builder.
func (huo *HexUpdateOne) Where(ps ...predicate.Hex) *HexUpdateOne {
	huo.mutation.Where(ps...)
	return huo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (huo *HexUpdateOne) Select(field string, fields ...string) *HexUpdateOne {
	huo.fields = append([]string{field}, fields...)
	return huo
}

// Save executes the query and returns the updated Hex entity.
func (huo *HexUpdateOne) Save(ctx context.Context) (*Hex, error) {
	return withHooks(ctx, huo.sqlSave, huo.mutation, huo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (huo *HexUpdateOne) SaveX(ctx context.Context) *Hex {
	node, err := huo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (huo *HexUpdateOne) Exec(ctx context.Context) error {
	_, err := huo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (huo *HexUpdateOne) ExecX(ctx context.Context) {
	if err := huo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (huo *HexUpdateOne) sqlSave(ctx context.Context) (_node *Hex, err error) {
	_spec := sqlgraph.NewUpdateSpec(hex.Table, hex.Columns, sqlgraph.NewFieldSpec(hex.FieldID, field.TypeInt))
	id, ok := huo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Hex.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := huo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hex.FieldID)
		for _, f := range fields {
			if !hex.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != hex.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := huo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := huo.mutation.HexOwner(); ok {
		_spec.SetField(hex.FieldHexOwner, field.TypeInt64, value)
	}
	if value, ok := huo.mutation.AddedHexOwner(); ok {
		_spec.AddField(hex.FieldHexOwner, field.TypeInt64, value)
	}
	if value, ok := huo.mutation.CreatedAt(); ok {
		_spec.SetField(hex.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := huo.mutation.UpdatedAt(); ok {
		_spec.SetField(hex.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := huo.mutation.IsActive(); ok {
		_spec.SetField(hex.FieldIsActive, field.TypeBool, value)
	}
	_node = &Hex{config: huo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, huo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hex.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	huo.mutation.done = true
	return _node, nil
}
