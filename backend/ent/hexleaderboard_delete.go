// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"stride-wars-app/ent/hexleaderboard"
	"stride-wars-app/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// HexLeaderboardDelete is the builder for deleting a HexLeaderboard entity.
type HexLeaderboardDelete struct {
	config
	hooks    []Hook
	mutation *HexLeaderboardMutation
}

// Where appends a list predicates to the HexLeaderboardDelete builder.
func (hld *HexLeaderboardDelete) Where(ps ...predicate.HexLeaderboard) *HexLeaderboardDelete {
	hld.mutation.Where(ps...)
	return hld
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (hld *HexLeaderboardDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, hld.sqlExec, hld.mutation, hld.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (hld *HexLeaderboardDelete) ExecX(ctx context.Context) int {
	n, err := hld.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (hld *HexLeaderboardDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(hexleaderboard.Table, sqlgraph.NewFieldSpec(hexleaderboard.FieldID, field.TypeInt))
	if ps := hld.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, hld.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	hld.mutation.done = true
	return affected, err
}

// HexLeaderboardDeleteOne is the builder for deleting a single HexLeaderboard entity.
type HexLeaderboardDeleteOne struct {
	hld *HexLeaderboardDelete
}

// Where appends a list predicates to the HexLeaderboardDelete builder.
func (hldo *HexLeaderboardDeleteOne) Where(ps ...predicate.HexLeaderboard) *HexLeaderboardDeleteOne {
	hldo.hld.mutation.Where(ps...)
	return hldo
}

// Exec executes the deletion query.
func (hldo *HexLeaderboardDeleteOne) Exec(ctx context.Context) error {
	n, err := hldo.hld.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{hexleaderboard.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (hldo *HexLeaderboardDeleteOne) ExecX(ctx context.Context) {
	if err := hldo.Exec(ctx); err != nil {
		panic(err)
	}
}
