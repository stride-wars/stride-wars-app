// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"stride-wars-app/ent/hex"
	"stride-wars-app/ent/hexleaderboard"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// HexLeaderboard is the model entity for the HexLeaderboard schema.
type HexLeaderboard struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// H3Index holds the value of the "h3_index" field.
	H3Index string `json:"h3_index,omitempty"`
	// TopUsers holds the value of the "top_users" field.
	TopUsers map[string][]uuid.UUID `json:"top_users,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the HexLeaderboardQuery when eager-loading is set.
	Edges        HexLeaderboardEdges `json:"edges"`
	selectValues sql.SelectValues
}

// HexLeaderboardEdges holds the relations/edges for other nodes in the graph.
type HexLeaderboardEdges struct {
	// Hex holds the value of the hex edge.
	Hex *Hex `json:"hex,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// HexOrErr returns the Hex value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HexLeaderboardEdges) HexOrErr() (*Hex, error) {
	if e.Hex != nil {
		return e.Hex, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: hex.Label}
	}
	return nil, &NotLoadedError{edge: "hex"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*HexLeaderboard) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case hexleaderboard.FieldTopUsers:
			values[i] = new([]byte)
		case hexleaderboard.FieldID:
			values[i] = new(sql.NullInt64)
		case hexleaderboard.FieldH3Index:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the HexLeaderboard fields.
func (hl *HexLeaderboard) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case hexleaderboard.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			hl.ID = int(value.Int64)
		case hexleaderboard.FieldH3Index:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field h3_index", values[i])
			} else if value.Valid {
				hl.H3Index = value.String
			}
		case hexleaderboard.FieldTopUsers:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field top_users", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &hl.TopUsers); err != nil {
					return fmt.Errorf("unmarshal field top_users: %w", err)
				}
			}
		default:
			hl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the HexLeaderboard.
// This includes values selected through modifiers, order, etc.
func (hl *HexLeaderboard) Value(name string) (ent.Value, error) {
	return hl.selectValues.Get(name)
}

// QueryHex queries the "hex" edge of the HexLeaderboard entity.
func (hl *HexLeaderboard) QueryHex() *HexQuery {
	return NewHexLeaderboardClient(hl.config).QueryHex(hl)
}

// Update returns a builder for updating this HexLeaderboard.
// Note that you need to call HexLeaderboard.Unwrap() before calling this method if this HexLeaderboard
// was returned from a transaction, and the transaction was committed or rolled back.
func (hl *HexLeaderboard) Update() *HexLeaderboardUpdateOne {
	return NewHexLeaderboardClient(hl.config).UpdateOne(hl)
}

// Unwrap unwraps the HexLeaderboard entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (hl *HexLeaderboard) Unwrap() *HexLeaderboard {
	_tx, ok := hl.config.driver.(*txDriver)
	if !ok {
		panic("ent: HexLeaderboard is not a transactional entity")
	}
	hl.config.driver = _tx.drv
	return hl
}

// String implements the fmt.Stringer.
func (hl *HexLeaderboard) String() string {
	var builder strings.Builder
	builder.WriteString("HexLeaderboard(")
	builder.WriteString(fmt.Sprintf("id=%v, ", hl.ID))
	builder.WriteString("h3_index=")
	builder.WriteString(hl.H3Index)
	builder.WriteString(", ")
	builder.WriteString("top_users=")
	builder.WriteString(fmt.Sprintf("%v", hl.TopUsers))
	builder.WriteByte(')')
	return builder.String()
}

// HexLeaderboards is a parsable slice of HexLeaderboard.
type HexLeaderboards []*HexLeaderboard
