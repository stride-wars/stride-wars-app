// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"stride-wars-app/ent/hex"
	"stride-wars-app/ent/hexleaderboard"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// HexLeaderboardCreate is the builder for creating a HexLeaderboard entity.
type HexLeaderboardCreate struct {
	config
	mutation *HexLeaderboardMutation
	hooks    []Hook
}

// SetH3Index sets the "h3_index" field.
func (hlc *HexLeaderboardCreate) SetH3Index(s string) *HexLeaderboardCreate {
	hlc.mutation.SetH3Index(s)
	return hlc
}

// SetTopUsers sets the "top_users" field.
func (hlc *HexLeaderboardCreate) SetTopUsers(m map[string][]uuid.UUID) *HexLeaderboardCreate {
	hlc.mutation.SetTopUsers(m)
	return hlc
}

// SetHexID sets the "hex" edge to the Hex entity by ID.
func (hlc *HexLeaderboardCreate) SetHexID(id string) *HexLeaderboardCreate {
	hlc.mutation.SetHexID(id)
	return hlc
}

// SetHex sets the "hex" edge to the Hex entity.
func (hlc *HexLeaderboardCreate) SetHex(h *Hex) *HexLeaderboardCreate {
	return hlc.SetHexID(h.ID)
}

// Mutation returns the HexLeaderboardMutation object of the builder.
func (hlc *HexLeaderboardCreate) Mutation() *HexLeaderboardMutation {
	return hlc.mutation
}

// Save creates the HexLeaderboard in the database.
func (hlc *HexLeaderboardCreate) Save(ctx context.Context) (*HexLeaderboard, error) {
	return withHooks(ctx, hlc.sqlSave, hlc.mutation, hlc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (hlc *HexLeaderboardCreate) SaveX(ctx context.Context) *HexLeaderboard {
	v, err := hlc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hlc *HexLeaderboardCreate) Exec(ctx context.Context) error {
	_, err := hlc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hlc *HexLeaderboardCreate) ExecX(ctx context.Context) {
	if err := hlc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hlc *HexLeaderboardCreate) check() error {
	if _, ok := hlc.mutation.H3Index(); !ok {
		return &ValidationError{Name: "h3_index", err: errors.New(`ent: missing required field "HexLeaderboard.h3_index"`)}
	}
	if _, ok := hlc.mutation.TopUsers(); !ok {
		return &ValidationError{Name: "top_users", err: errors.New(`ent: missing required field "HexLeaderboard.top_users"`)}
	}
	if len(hlc.mutation.HexIDs()) == 0 {
		return &ValidationError{Name: "hex", err: errors.New(`ent: missing required edge "HexLeaderboard.hex"`)}
	}
	return nil
}

func (hlc *HexLeaderboardCreate) sqlSave(ctx context.Context) (*HexLeaderboard, error) {
	if err := hlc.check(); err != nil {
		return nil, err
	}
	_node, _spec := hlc.createSpec()
	if err := sqlgraph.CreateNode(ctx, hlc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	hlc.mutation.id = &_node.ID
	hlc.mutation.done = true
	return _node, nil
}

func (hlc *HexLeaderboardCreate) createSpec() (*HexLeaderboard, *sqlgraph.CreateSpec) {
	var (
		_node = &HexLeaderboard{config: hlc.config}
		_spec = sqlgraph.NewCreateSpec(hexleaderboard.Table, sqlgraph.NewFieldSpec(hexleaderboard.FieldID, field.TypeInt))
	)
	if value, ok := hlc.mutation.TopUsers(); ok {
		_spec.SetField(hexleaderboard.FieldTopUsers, field.TypeJSON, value)
		_node.TopUsers = value
	}
	if nodes := hlc.mutation.HexIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hexleaderboard.HexTable,
			Columns: []string{hexleaderboard.HexColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hex.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.H3Index = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// HexLeaderboardCreateBulk is the builder for creating many HexLeaderboard entities in bulk.
type HexLeaderboardCreateBulk struct {
	config
	err      error
	builders []*HexLeaderboardCreate
}

// Save creates the HexLeaderboard entities in the database.
func (hlcb *HexLeaderboardCreateBulk) Save(ctx context.Context) ([]*HexLeaderboard, error) {
	if hlcb.err != nil {
		return nil, hlcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(hlcb.builders))
	nodes := make([]*HexLeaderboard, len(hlcb.builders))
	mutators := make([]Mutator, len(hlcb.builders))
	for i := range hlcb.builders {
		func(i int, root context.Context) {
			builder := hlcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HexLeaderboardMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, hlcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, hlcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, hlcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (hlcb *HexLeaderboardCreateBulk) SaveX(ctx context.Context) []*HexLeaderboard {
	v, err := hlcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hlcb *HexLeaderboardCreateBulk) Exec(ctx context.Context) error {
	_, err := hlcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hlcb *HexLeaderboardCreateBulk) ExecX(ctx context.Context) {
	if err := hlcb.Exec(ctx); err != nil {
		panic(err)
	}
}
