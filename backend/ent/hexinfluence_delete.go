// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"stride-wars-app/ent/hexinfluence"
	"stride-wars-app/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// HexInfluenceDelete is the builder for deleting a HexInfluence entity.
type HexInfluenceDelete struct {
	config
	hooks    []Hook
	mutation *HexInfluenceMutation
}

// Where appends a list predicates to the HexInfluenceDelete builder.
func (hid *HexInfluenceDelete) Where(ps ...predicate.HexInfluence) *HexInfluenceDelete {
	hid.mutation.Where(ps...)
	return hid
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (hid *HexInfluenceDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, hid.sqlExec, hid.mutation, hid.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (hid *HexInfluenceDelete) ExecX(ctx context.Context) int {
	n, err := hid.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (hid *HexInfluenceDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(hexinfluence.Table, sqlgraph.NewFieldSpec(hexinfluence.FieldID, field.TypeUUID))
	if ps := hid.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, hid.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	hid.mutation.done = true
	return affected, err
}

// HexInfluenceDeleteOne is the builder for deleting a single HexInfluence entity.
type HexInfluenceDeleteOne struct {
	hid *HexInfluenceDelete
}

// Where appends a list predicates to the HexInfluenceDelete builder.
func (hido *HexInfluenceDeleteOne) Where(ps ...predicate.HexInfluence) *HexInfluenceDeleteOne {
	hido.hid.mutation.Where(ps...)
	return hido
}

// Exec executes the deletion query.
func (hido *HexInfluenceDeleteOne) Exec(ctx context.Context) error {
	n, err := hido.hid.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{hexinfluence.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (hido *HexInfluenceDeleteOne) ExecX(ctx context.Context) {
	if err := hido.Exec(ctx); err != nil {
		panic(err)
	}
}
