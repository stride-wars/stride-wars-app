// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"stride-wars-app/ent/hex"
	"stride-wars-app/ent/hexinfluence"
	"stride-wars-app/ent/predicate"
	"stride-wars-app/ent/user"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// HexInfluenceQuery is the builder for querying HexInfluence entities.
type HexInfluenceQuery struct {
	config
	ctx        *QueryContext
	order      []hexinfluence.OrderOption
	inters     []Interceptor
	predicates []predicate.HexInfluence
	withHex    *HexQuery
	withUsers  *UserQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the HexInfluenceQuery builder.
func (hiq *HexInfluenceQuery) Where(ps ...predicate.HexInfluence) *HexInfluenceQuery {
	hiq.predicates = append(hiq.predicates, ps...)
	return hiq
}

// Limit the number of records to be returned by this query.
func (hiq *HexInfluenceQuery) Limit(limit int) *HexInfluenceQuery {
	hiq.ctx.Limit = &limit
	return hiq
}

// Offset to start from.
func (hiq *HexInfluenceQuery) Offset(offset int) *HexInfluenceQuery {
	hiq.ctx.Offset = &offset
	return hiq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (hiq *HexInfluenceQuery) Unique(unique bool) *HexInfluenceQuery {
	hiq.ctx.Unique = &unique
	return hiq
}

// Order specifies how the records should be ordered.
func (hiq *HexInfluenceQuery) Order(o ...hexinfluence.OrderOption) *HexInfluenceQuery {
	hiq.order = append(hiq.order, o...)
	return hiq
}

// QueryHex chains the current query on the "hex" edge.
func (hiq *HexInfluenceQuery) QueryHex() *HexQuery {
	query := (&HexClient{config: hiq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hiq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hexinfluence.Table, hexinfluence.FieldID, selector),
			sqlgraph.To(hex.Table, hex.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, hexinfluence.HexTable, hexinfluence.HexColumn),
		)
		fromU = sqlgraph.SetNeighbors(hiq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUsers chains the current query on the "users" edge.
func (hiq *HexInfluenceQuery) QueryUsers() *UserQuery {
	query := (&UserClient{config: hiq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hiq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hexinfluence.Table, hexinfluence.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, hexinfluence.UsersTable, hexinfluence.UsersColumn),
		)
		fromU = sqlgraph.SetNeighbors(hiq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first HexInfluence entity from the query.
// Returns a *NotFoundError when no HexInfluence was found.
func (hiq *HexInfluenceQuery) First(ctx context.Context) (*HexInfluence, error) {
	nodes, err := hiq.Limit(1).All(setContextOp(ctx, hiq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{hexinfluence.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (hiq *HexInfluenceQuery) FirstX(ctx context.Context) *HexInfluence {
	node, err := hiq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first HexInfluence ID from the query.
// Returns a *NotFoundError when no HexInfluence ID was found.
func (hiq *HexInfluenceQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = hiq.Limit(1).IDs(setContextOp(ctx, hiq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{hexinfluence.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (hiq *HexInfluenceQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := hiq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single HexInfluence entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one HexInfluence entity is found.
// Returns a *NotFoundError when no HexInfluence entities are found.
func (hiq *HexInfluenceQuery) Only(ctx context.Context) (*HexInfluence, error) {
	nodes, err := hiq.Limit(2).All(setContextOp(ctx, hiq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{hexinfluence.Label}
	default:
		return nil, &NotSingularError{hexinfluence.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (hiq *HexInfluenceQuery) OnlyX(ctx context.Context) *HexInfluence {
	node, err := hiq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only HexInfluence ID in the query.
// Returns a *NotSingularError when more than one HexInfluence ID is found.
// Returns a *NotFoundError when no entities are found.
func (hiq *HexInfluenceQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = hiq.Limit(2).IDs(setContextOp(ctx, hiq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{hexinfluence.Label}
	default:
		err = &NotSingularError{hexinfluence.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (hiq *HexInfluenceQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := hiq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of HexInfluences.
func (hiq *HexInfluenceQuery) All(ctx context.Context) ([]*HexInfluence, error) {
	ctx = setContextOp(ctx, hiq.ctx, ent.OpQueryAll)
	if err := hiq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*HexInfluence, *HexInfluenceQuery]()
	return withInterceptors[[]*HexInfluence](ctx, hiq, qr, hiq.inters)
}

// AllX is like All, but panics if an error occurs.
func (hiq *HexInfluenceQuery) AllX(ctx context.Context) []*HexInfluence {
	nodes, err := hiq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of HexInfluence IDs.
func (hiq *HexInfluenceQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if hiq.ctx.Unique == nil && hiq.path != nil {
		hiq.Unique(true)
	}
	ctx = setContextOp(ctx, hiq.ctx, ent.OpQueryIDs)
	if err = hiq.Select(hexinfluence.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (hiq *HexInfluenceQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := hiq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (hiq *HexInfluenceQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, hiq.ctx, ent.OpQueryCount)
	if err := hiq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, hiq, querierCount[*HexInfluenceQuery](), hiq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (hiq *HexInfluenceQuery) CountX(ctx context.Context) int {
	count, err := hiq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (hiq *HexInfluenceQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, hiq.ctx, ent.OpQueryExist)
	switch _, err := hiq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (hiq *HexInfluenceQuery) ExistX(ctx context.Context) bool {
	exist, err := hiq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the HexInfluenceQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (hiq *HexInfluenceQuery) Clone() *HexInfluenceQuery {
	if hiq == nil {
		return nil
	}
	return &HexInfluenceQuery{
		config:     hiq.config,
		ctx:        hiq.ctx.Clone(),
		order:      append([]hexinfluence.OrderOption{}, hiq.order...),
		inters:     append([]Interceptor{}, hiq.inters...),
		predicates: append([]predicate.HexInfluence{}, hiq.predicates...),
		withHex:    hiq.withHex.Clone(),
		withUsers:  hiq.withUsers.Clone(),
		// clone intermediate query.
		sql:  hiq.sql.Clone(),
		path: hiq.path,
	}
}

// WithHex tells the query-builder to eager-load the nodes that are connected to
// the "hex" edge. The optional arguments are used to configure the query builder of the edge.
func (hiq *HexInfluenceQuery) WithHex(opts ...func(*HexQuery)) *HexInfluenceQuery {
	query := (&HexClient{config: hiq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hiq.withHex = query
	return hiq
}

// WithUsers tells the query-builder to eager-load the nodes that are connected to
// the "users" edge. The optional arguments are used to configure the query builder of the edge.
func (hiq *HexInfluenceQuery) WithUsers(opts ...func(*UserQuery)) *HexInfluenceQuery {
	query := (&UserClient{config: hiq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hiq.withUsers = query
	return hiq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		H3Index int64 `json:"h3_index,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.HexInfluence.Query().
//		GroupBy(hexinfluence.FieldH3Index).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (hiq *HexInfluenceQuery) GroupBy(field string, fields ...string) *HexInfluenceGroupBy {
	hiq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &HexInfluenceGroupBy{build: hiq}
	grbuild.flds = &hiq.ctx.Fields
	grbuild.label = hexinfluence.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		H3Index int64 `json:"h3_index,omitempty"`
//	}
//
//	client.HexInfluence.Query().
//		Select(hexinfluence.FieldH3Index).
//		Scan(ctx, &v)
func (hiq *HexInfluenceQuery) Select(fields ...string) *HexInfluenceSelect {
	hiq.ctx.Fields = append(hiq.ctx.Fields, fields...)
	sbuild := &HexInfluenceSelect{HexInfluenceQuery: hiq}
	sbuild.label = hexinfluence.Label
	sbuild.flds, sbuild.scan = &hiq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a HexInfluenceSelect configured with the given aggregations.
func (hiq *HexInfluenceQuery) Aggregate(fns ...AggregateFunc) *HexInfluenceSelect {
	return hiq.Select().Aggregate(fns...)
}

func (hiq *HexInfluenceQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range hiq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, hiq); err != nil {
				return err
			}
		}
	}
	for _, f := range hiq.ctx.Fields {
		if !hexinfluence.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if hiq.path != nil {
		prev, err := hiq.path(ctx)
		if err != nil {
			return err
		}
		hiq.sql = prev
	}
	return nil
}

func (hiq *HexInfluenceQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*HexInfluence, error) {
	var (
		nodes       = []*HexInfluence{}
		_spec       = hiq.querySpec()
		loadedTypes = [2]bool{
			hiq.withHex != nil,
			hiq.withUsers != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*HexInfluence).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &HexInfluence{config: hiq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, hiq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := hiq.withHex; query != nil {
		if err := hiq.loadHex(ctx, query, nodes, nil,
			func(n *HexInfluence, e *Hex) { n.Edges.Hex = e }); err != nil {
			return nil, err
		}
	}
	if query := hiq.withUsers; query != nil {
		if err := hiq.loadUsers(ctx, query, nodes, nil,
			func(n *HexInfluence, e *User) { n.Edges.Users = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (hiq *HexInfluenceQuery) loadHex(ctx context.Context, query *HexQuery, nodes []*HexInfluence, init func(*HexInfluence), assign func(*HexInfluence, *Hex)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*HexInfluence)
	for i := range nodes {
		fk := nodes[i].H3Index
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(hex.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "h3_index" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (hiq *HexInfluenceQuery) loadUsers(ctx context.Context, query *UserQuery, nodes []*HexInfluence, init func(*HexInfluence), assign func(*HexInfluence, *User)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*HexInfluence)
	for i := range nodes {
		fk := nodes[i].UserID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (hiq *HexInfluenceQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := hiq.querySpec()
	_spec.Node.Columns = hiq.ctx.Fields
	if len(hiq.ctx.Fields) > 0 {
		_spec.Unique = hiq.ctx.Unique != nil && *hiq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, hiq.driver, _spec)
}

func (hiq *HexInfluenceQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(hexinfluence.Table, hexinfluence.Columns, sqlgraph.NewFieldSpec(hexinfluence.FieldID, field.TypeUUID))
	_spec.From = hiq.sql
	if unique := hiq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if hiq.path != nil {
		_spec.Unique = true
	}
	if fields := hiq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hexinfluence.FieldID)
		for i := range fields {
			if fields[i] != hexinfluence.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if hiq.withHex != nil {
			_spec.Node.AddColumnOnce(hexinfluence.FieldH3Index)
		}
		if hiq.withUsers != nil {
			_spec.Node.AddColumnOnce(hexinfluence.FieldUserID)
		}
	}
	if ps := hiq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := hiq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := hiq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := hiq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (hiq *HexInfluenceQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(hiq.driver.Dialect())
	t1 := builder.Table(hexinfluence.Table)
	columns := hiq.ctx.Fields
	if len(columns) == 0 {
		columns = hexinfluence.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if hiq.sql != nil {
		selector = hiq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if hiq.ctx.Unique != nil && *hiq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range hiq.predicates {
		p(selector)
	}
	for _, p := range hiq.order {
		p(selector)
	}
	if offset := hiq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := hiq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// HexInfluenceGroupBy is the group-by builder for HexInfluence entities.
type HexInfluenceGroupBy struct {
	selector
	build *HexInfluenceQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (higb *HexInfluenceGroupBy) Aggregate(fns ...AggregateFunc) *HexInfluenceGroupBy {
	higb.fns = append(higb.fns, fns...)
	return higb
}

// Scan applies the selector query and scans the result into the given value.
func (higb *HexInfluenceGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, higb.build.ctx, ent.OpQueryGroupBy)
	if err := higb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*HexInfluenceQuery, *HexInfluenceGroupBy](ctx, higb.build, higb, higb.build.inters, v)
}

func (higb *HexInfluenceGroupBy) sqlScan(ctx context.Context, root *HexInfluenceQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(higb.fns))
	for _, fn := range higb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*higb.flds)+len(higb.fns))
		for _, f := range *higb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*higb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := higb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// HexInfluenceSelect is the builder for selecting fields of HexInfluence entities.
type HexInfluenceSelect struct {
	*HexInfluenceQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (his *HexInfluenceSelect) Aggregate(fns ...AggregateFunc) *HexInfluenceSelect {
	his.fns = append(his.fns, fns...)
	return his
}

// Scan applies the selector query and scans the result into the given value.
func (his *HexInfluenceSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, his.ctx, ent.OpQuerySelect)
	if err := his.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*HexInfluenceQuery, *HexInfluenceSelect](ctx, his.HexInfluenceQuery, his, his.inters, v)
}

func (his *HexInfluenceSelect) sqlScan(ctx context.Context, root *HexInfluenceQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(his.fns))
	for _, fn := range his.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*his.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := his.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
