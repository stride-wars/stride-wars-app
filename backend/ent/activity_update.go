// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"stride-wars-app/ent/activity"
	"stride-wars-app/ent/predicate"
	"stride-wars-app/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ActivityUpdate is the builder for updating Activity entities.
type ActivityUpdate struct {
	config
	hooks    []Hook
	mutation *ActivityMutation
}

// Where appends a list predicates to the ActivityUpdate builder.
func (au *ActivityUpdate) Where(ps ...predicate.Activity) *ActivityUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetUserID sets the "user_id" field.
func (au *ActivityUpdate) SetUserID(u uuid.UUID) *ActivityUpdate {
	au.mutation.SetUserID(u)
	return au
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableUserID(u *uuid.UUID) *ActivityUpdate {
	if u != nil {
		au.SetUserID(*u)
	}
	return au
}

// SetDurationSeconds sets the "duration_seconds" field.
func (au *ActivityUpdate) SetDurationSeconds(f float64) *ActivityUpdate {
	au.mutation.ResetDurationSeconds()
	au.mutation.SetDurationSeconds(f)
	return au
}

// SetNillableDurationSeconds sets the "duration_seconds" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableDurationSeconds(f *float64) *ActivityUpdate {
	if f != nil {
		au.SetDurationSeconds(*f)
	}
	return au
}

// AddDurationSeconds adds f to the "duration_seconds" field.
func (au *ActivityUpdate) AddDurationSeconds(f float64) *ActivityUpdate {
	au.mutation.AddDurationSeconds(f)
	return au
}

// SetDistanceMeters sets the "distance_meters" field.
func (au *ActivityUpdate) SetDistanceMeters(f float64) *ActivityUpdate {
	au.mutation.ResetDistanceMeters()
	au.mutation.SetDistanceMeters(f)
	return au
}

// SetNillableDistanceMeters sets the "distance_meters" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableDistanceMeters(f *float64) *ActivityUpdate {
	if f != nil {
		au.SetDistanceMeters(*f)
	}
	return au
}

// AddDistanceMeters adds f to the "distance_meters" field.
func (au *ActivityUpdate) AddDistanceMeters(f float64) *ActivityUpdate {
	au.mutation.AddDistanceMeters(f)
	return au
}

// SetH3Indexes sets the "h3_indexes" field.
func (au *ActivityUpdate) SetH3Indexes(s []string) *ActivityUpdate {
	au.mutation.SetH3Indexes(s)
	return au
}

// AppendH3Indexes appends s to the "h3_indexes" field.
func (au *ActivityUpdate) AppendH3Indexes(s []string) *ActivityUpdate {
	au.mutation.AppendH3Indexes(s)
	return au
}

// SetCreatedAt sets the "created_at" field.
func (au *ActivityUpdate) SetCreatedAt(t time.Time) *ActivityUpdate {
	au.mutation.SetCreatedAt(t)
	return au
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableCreatedAt(t *time.Time) *ActivityUpdate {
	if t != nil {
		au.SetCreatedAt(*t)
	}
	return au
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (au *ActivityUpdate) SetUsersID(id uuid.UUID) *ActivityUpdate {
	au.mutation.SetUsersID(id)
	return au
}

// SetUsers sets the "users" edge to the User entity.
func (au *ActivityUpdate) SetUsers(u *User) *ActivityUpdate {
	return au.SetUsersID(u.ID)
}

// Mutation returns the ActivityMutation object of the builder.
func (au *ActivityUpdate) Mutation() *ActivityMutation {
	return au.mutation
}

// ClearUsers clears the "users" edge to the User entity.
func (au *ActivityUpdate) ClearUsers() *ActivityUpdate {
	au.mutation.ClearUsers()
	return au
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *ActivityUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *ActivityUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *ActivityUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *ActivityUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *ActivityUpdate) check() error {
	if au.mutation.UsersCleared() && len(au.mutation.UsersIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Activity.users"`)
	}
	return nil
}

func (au *ActivityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(activity.Table, activity.Columns, sqlgraph.NewFieldSpec(activity.FieldID, field.TypeUUID))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.DurationSeconds(); ok {
		_spec.SetField(activity.FieldDurationSeconds, field.TypeFloat64, value)
	}
	if value, ok := au.mutation.AddedDurationSeconds(); ok {
		_spec.AddField(activity.FieldDurationSeconds, field.TypeFloat64, value)
	}
	if value, ok := au.mutation.DistanceMeters(); ok {
		_spec.SetField(activity.FieldDistanceMeters, field.TypeFloat64, value)
	}
	if value, ok := au.mutation.AddedDistanceMeters(); ok {
		_spec.AddField(activity.FieldDistanceMeters, field.TypeFloat64, value)
	}
	if value, ok := au.mutation.H3Indexes(); ok {
		_spec.SetField(activity.FieldH3Indexes, field.TypeJSON, value)
	}
	if value, ok := au.mutation.AppendedH3Indexes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, activity.FieldH3Indexes, value)
		})
	}
	if value, ok := au.mutation.CreatedAt(); ok {
		_spec.SetField(activity.FieldCreatedAt, field.TypeTime, value)
	}
	if au.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   activity.UsersTable,
			Columns: []string{activity.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   activity.UsersTable,
			Columns: []string{activity.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{activity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// ActivityUpdateOne is the builder for updating a single Activity entity.
type ActivityUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ActivityMutation
}

// SetUserID sets the "user_id" field.
func (auo *ActivityUpdateOne) SetUserID(u uuid.UUID) *ActivityUpdateOne {
	auo.mutation.SetUserID(u)
	return auo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableUserID(u *uuid.UUID) *ActivityUpdateOne {
	if u != nil {
		auo.SetUserID(*u)
	}
	return auo
}

// SetDurationSeconds sets the "duration_seconds" field.
func (auo *ActivityUpdateOne) SetDurationSeconds(f float64) *ActivityUpdateOne {
	auo.mutation.ResetDurationSeconds()
	auo.mutation.SetDurationSeconds(f)
	return auo
}

// SetNillableDurationSeconds sets the "duration_seconds" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableDurationSeconds(f *float64) *ActivityUpdateOne {
	if f != nil {
		auo.SetDurationSeconds(*f)
	}
	return auo
}

// AddDurationSeconds adds f to the "duration_seconds" field.
func (auo *ActivityUpdateOne) AddDurationSeconds(f float64) *ActivityUpdateOne {
	auo.mutation.AddDurationSeconds(f)
	return auo
}

// SetDistanceMeters sets the "distance_meters" field.
func (auo *ActivityUpdateOne) SetDistanceMeters(f float64) *ActivityUpdateOne {
	auo.mutation.ResetDistanceMeters()
	auo.mutation.SetDistanceMeters(f)
	return auo
}

// SetNillableDistanceMeters sets the "distance_meters" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableDistanceMeters(f *float64) *ActivityUpdateOne {
	if f != nil {
		auo.SetDistanceMeters(*f)
	}
	return auo
}

// AddDistanceMeters adds f to the "distance_meters" field.
func (auo *ActivityUpdateOne) AddDistanceMeters(f float64) *ActivityUpdateOne {
	auo.mutation.AddDistanceMeters(f)
	return auo
}

// SetH3Indexes sets the "h3_indexes" field.
func (auo *ActivityUpdateOne) SetH3Indexes(s []string) *ActivityUpdateOne {
	auo.mutation.SetH3Indexes(s)
	return auo
}

// AppendH3Indexes appends s to the "h3_indexes" field.
func (auo *ActivityUpdateOne) AppendH3Indexes(s []string) *ActivityUpdateOne {
	auo.mutation.AppendH3Indexes(s)
	return auo
}

// SetCreatedAt sets the "created_at" field.
func (auo *ActivityUpdateOne) SetCreatedAt(t time.Time) *ActivityUpdateOne {
	auo.mutation.SetCreatedAt(t)
	return auo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableCreatedAt(t *time.Time) *ActivityUpdateOne {
	if t != nil {
		auo.SetCreatedAt(*t)
	}
	return auo
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (auo *ActivityUpdateOne) SetUsersID(id uuid.UUID) *ActivityUpdateOne {
	auo.mutation.SetUsersID(id)
	return auo
}

// SetUsers sets the "users" edge to the User entity.
func (auo *ActivityUpdateOne) SetUsers(u *User) *ActivityUpdateOne {
	return auo.SetUsersID(u.ID)
}

// Mutation returns the ActivityMutation object of the builder.
func (auo *ActivityUpdateOne) Mutation() *ActivityMutation {
	return auo.mutation
}

// ClearUsers clears the "users" edge to the User entity.
func (auo *ActivityUpdateOne) ClearUsers() *ActivityUpdateOne {
	auo.mutation.ClearUsers()
	return auo
}

// Where appends a list predicates to the ActivityUpdate builder.
func (auo *ActivityUpdateOne) Where(ps ...predicate.Activity) *ActivityUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *ActivityUpdateOne) Select(field string, fields ...string) *ActivityUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Activity entity.
func (auo *ActivityUpdateOne) Save(ctx context.Context) (*Activity, error) {
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *ActivityUpdateOne) SaveX(ctx context.Context) *Activity {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *ActivityUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *ActivityUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *ActivityUpdateOne) check() error {
	if auo.mutation.UsersCleared() && len(auo.mutation.UsersIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Activity.users"`)
	}
	return nil
}

func (auo *ActivityUpdateOne) sqlSave(ctx context.Context) (_node *Activity, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(activity.Table, activity.Columns, sqlgraph.NewFieldSpec(activity.FieldID, field.TypeUUID))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Activity.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, activity.FieldID)
		for _, f := range fields {
			if !activity.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != activity.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.DurationSeconds(); ok {
		_spec.SetField(activity.FieldDurationSeconds, field.TypeFloat64, value)
	}
	if value, ok := auo.mutation.AddedDurationSeconds(); ok {
		_spec.AddField(activity.FieldDurationSeconds, field.TypeFloat64, value)
	}
	if value, ok := auo.mutation.DistanceMeters(); ok {
		_spec.SetField(activity.FieldDistanceMeters, field.TypeFloat64, value)
	}
	if value, ok := auo.mutation.AddedDistanceMeters(); ok {
		_spec.AddField(activity.FieldDistanceMeters, field.TypeFloat64, value)
	}
	if value, ok := auo.mutation.H3Indexes(); ok {
		_spec.SetField(activity.FieldH3Indexes, field.TypeJSON, value)
	}
	if value, ok := auo.mutation.AppendedH3Indexes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, activity.FieldH3Indexes, value)
		})
	}
	if value, ok := auo.mutation.CreatedAt(); ok {
		_spec.SetField(activity.FieldCreatedAt, field.TypeTime, value)
	}
	if auo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   activity.UsersTable,
			Columns: []string{activity.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   activity.UsersTable,
			Columns: []string{activity.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Activity{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{activity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
