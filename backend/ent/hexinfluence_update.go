// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"stride-wars-app/ent/hex"
	"stride-wars-app/ent/hexinfluence"
	"stride-wars-app/ent/predicate"
	"stride-wars-app/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// HexInfluenceUpdate is the builder for updating HexInfluence entities.
type HexInfluenceUpdate struct {
	config
	hooks    []Hook
	mutation *HexInfluenceMutation
}

// Where appends a list predicates to the HexInfluenceUpdate builder.
func (hiu *HexInfluenceUpdate) Where(ps ...predicate.HexInfluence) *HexInfluenceUpdate {
	hiu.mutation.Where(ps...)
	return hiu
}

// SetH3Index sets the "h3_index" field.
func (hiu *HexInfluenceUpdate) SetH3Index(i int64) *HexInfluenceUpdate {
	hiu.mutation.SetH3Index(i)
	return hiu
}

// SetNillableH3Index sets the "h3_index" field if the given value is not nil.
func (hiu *HexInfluenceUpdate) SetNillableH3Index(i *int64) *HexInfluenceUpdate {
	if i != nil {
		hiu.SetH3Index(*i)
	}
	return hiu
}

// SetUserID sets the "user_id" field.
func (hiu *HexInfluenceUpdate) SetUserID(u uuid.UUID) *HexInfluenceUpdate {
	hiu.mutation.SetUserID(u)
	return hiu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (hiu *HexInfluenceUpdate) SetNillableUserID(u *uuid.UUID) *HexInfluenceUpdate {
	if u != nil {
		hiu.SetUserID(*u)
	}
	return hiu
}

// SetScore sets the "score" field.
func (hiu *HexInfluenceUpdate) SetScore(f float64) *HexInfluenceUpdate {
	hiu.mutation.ResetScore()
	hiu.mutation.SetScore(f)
	return hiu
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (hiu *HexInfluenceUpdate) SetNillableScore(f *float64) *HexInfluenceUpdate {
	if f != nil {
		hiu.SetScore(*f)
	}
	return hiu
}

// AddScore adds f to the "score" field.
func (hiu *HexInfluenceUpdate) AddScore(f float64) *HexInfluenceUpdate {
	hiu.mutation.AddScore(f)
	return hiu
}

// SetLastUpdated sets the "last_updated" field.
func (hiu *HexInfluenceUpdate) SetLastUpdated(t time.Time) *HexInfluenceUpdate {
	hiu.mutation.SetLastUpdated(t)
	return hiu
}

// SetNillableLastUpdated sets the "last_updated" field if the given value is not nil.
func (hiu *HexInfluenceUpdate) SetNillableLastUpdated(t *time.Time) *HexInfluenceUpdate {
	if t != nil {
		hiu.SetLastUpdated(*t)
	}
	return hiu
}

// SetHexID sets the "hex" edge to the Hex entity by ID.
func (hiu *HexInfluenceUpdate) SetHexID(id int64) *HexInfluenceUpdate {
	hiu.mutation.SetHexID(id)
	return hiu
}

// SetHex sets the "hex" edge to the Hex entity.
func (hiu *HexInfluenceUpdate) SetHex(h *Hex) *HexInfluenceUpdate {
	return hiu.SetHexID(h.ID)
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (hiu *HexInfluenceUpdate) SetUsersID(id uuid.UUID) *HexInfluenceUpdate {
	hiu.mutation.SetUsersID(id)
	return hiu
}

// SetUsers sets the "users" edge to the User entity.
func (hiu *HexInfluenceUpdate) SetUsers(u *User) *HexInfluenceUpdate {
	return hiu.SetUsersID(u.ID)
}

// Mutation returns the HexInfluenceMutation object of the builder.
func (hiu *HexInfluenceUpdate) Mutation() *HexInfluenceMutation {
	return hiu.mutation
}

// ClearHex clears the "hex" edge to the Hex entity.
func (hiu *HexInfluenceUpdate) ClearHex() *HexInfluenceUpdate {
	hiu.mutation.ClearHex()
	return hiu
}

// ClearUsers clears the "users" edge to the User entity.
func (hiu *HexInfluenceUpdate) ClearUsers() *HexInfluenceUpdate {
	hiu.mutation.ClearUsers()
	return hiu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hiu *HexInfluenceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, hiu.sqlSave, hiu.mutation, hiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hiu *HexInfluenceUpdate) SaveX(ctx context.Context) int {
	affected, err := hiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hiu *HexInfluenceUpdate) Exec(ctx context.Context) error {
	_, err := hiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hiu *HexInfluenceUpdate) ExecX(ctx context.Context) {
	if err := hiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hiu *HexInfluenceUpdate) check() error {
	if hiu.mutation.HexCleared() && len(hiu.mutation.HexIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "HexInfluence.hex"`)
	}
	if hiu.mutation.UsersCleared() && len(hiu.mutation.UsersIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "HexInfluence.users"`)
	}
	return nil
}

func (hiu *HexInfluenceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := hiu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(hexinfluence.Table, hexinfluence.Columns, sqlgraph.NewFieldSpec(hexinfluence.FieldID, field.TypeUUID))
	if ps := hiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hiu.mutation.Score(); ok {
		_spec.SetField(hexinfluence.FieldScore, field.TypeFloat64, value)
	}
	if value, ok := hiu.mutation.AddedScore(); ok {
		_spec.AddField(hexinfluence.FieldScore, field.TypeFloat64, value)
	}
	if value, ok := hiu.mutation.LastUpdated(); ok {
		_spec.SetField(hexinfluence.FieldLastUpdated, field.TypeTime, value)
	}
	if hiu.mutation.HexCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hexinfluence.HexTable,
			Columns: []string{hexinfluence.HexColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hex.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hiu.mutation.HexIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hexinfluence.HexTable,
			Columns: []string{hexinfluence.HexColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hex.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hiu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hexinfluence.UsersTable,
			Columns: []string{hexinfluence.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hiu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hexinfluence.UsersTable,
			Columns: []string{hexinfluence.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hexinfluence.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	hiu.mutation.done = true
	return n, nil
}

// HexInfluenceUpdateOne is the builder for updating a single HexInfluence entity.
type HexInfluenceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HexInfluenceMutation
}

// SetH3Index sets the "h3_index" field.
func (hiuo *HexInfluenceUpdateOne) SetH3Index(i int64) *HexInfluenceUpdateOne {
	hiuo.mutation.SetH3Index(i)
	return hiuo
}

// SetNillableH3Index sets the "h3_index" field if the given value is not nil.
func (hiuo *HexInfluenceUpdateOne) SetNillableH3Index(i *int64) *HexInfluenceUpdateOne {
	if i != nil {
		hiuo.SetH3Index(*i)
	}
	return hiuo
}

// SetUserID sets the "user_id" field.
func (hiuo *HexInfluenceUpdateOne) SetUserID(u uuid.UUID) *HexInfluenceUpdateOne {
	hiuo.mutation.SetUserID(u)
	return hiuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (hiuo *HexInfluenceUpdateOne) SetNillableUserID(u *uuid.UUID) *HexInfluenceUpdateOne {
	if u != nil {
		hiuo.SetUserID(*u)
	}
	return hiuo
}

// SetScore sets the "score" field.
func (hiuo *HexInfluenceUpdateOne) SetScore(f float64) *HexInfluenceUpdateOne {
	hiuo.mutation.ResetScore()
	hiuo.mutation.SetScore(f)
	return hiuo
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (hiuo *HexInfluenceUpdateOne) SetNillableScore(f *float64) *HexInfluenceUpdateOne {
	if f != nil {
		hiuo.SetScore(*f)
	}
	return hiuo
}

// AddScore adds f to the "score" field.
func (hiuo *HexInfluenceUpdateOne) AddScore(f float64) *HexInfluenceUpdateOne {
	hiuo.mutation.AddScore(f)
	return hiuo
}

// SetLastUpdated sets the "last_updated" field.
func (hiuo *HexInfluenceUpdateOne) SetLastUpdated(t time.Time) *HexInfluenceUpdateOne {
	hiuo.mutation.SetLastUpdated(t)
	return hiuo
}

// SetNillableLastUpdated sets the "last_updated" field if the given value is not nil.
func (hiuo *HexInfluenceUpdateOne) SetNillableLastUpdated(t *time.Time) *HexInfluenceUpdateOne {
	if t != nil {
		hiuo.SetLastUpdated(*t)
	}
	return hiuo
}

// SetHexID sets the "hex" edge to the Hex entity by ID.
func (hiuo *HexInfluenceUpdateOne) SetHexID(id int64) *HexInfluenceUpdateOne {
	hiuo.mutation.SetHexID(id)
	return hiuo
}

// SetHex sets the "hex" edge to the Hex entity.
func (hiuo *HexInfluenceUpdateOne) SetHex(h *Hex) *HexInfluenceUpdateOne {
	return hiuo.SetHexID(h.ID)
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (hiuo *HexInfluenceUpdateOne) SetUsersID(id uuid.UUID) *HexInfluenceUpdateOne {
	hiuo.mutation.SetUsersID(id)
	return hiuo
}

// SetUsers sets the "users" edge to the User entity.
func (hiuo *HexInfluenceUpdateOne) SetUsers(u *User) *HexInfluenceUpdateOne {
	return hiuo.SetUsersID(u.ID)
}

// Mutation returns the HexInfluenceMutation object of the builder.
func (hiuo *HexInfluenceUpdateOne) Mutation() *HexInfluenceMutation {
	return hiuo.mutation
}

// ClearHex clears the "hex" edge to the Hex entity.
func (hiuo *HexInfluenceUpdateOne) ClearHex() *HexInfluenceUpdateOne {
	hiuo.mutation.ClearHex()
	return hiuo
}

// ClearUsers clears the "users" edge to the User entity.
func (hiuo *HexInfluenceUpdateOne) ClearUsers() *HexInfluenceUpdateOne {
	hiuo.mutation.ClearUsers()
	return hiuo
}

// Where appends a list predicates to the HexInfluenceUpdate builder.
func (hiuo *HexInfluenceUpdateOne) Where(ps ...predicate.HexInfluence) *HexInfluenceUpdateOne {
	hiuo.mutation.Where(ps...)
	return hiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (hiuo *HexInfluenceUpdateOne) Select(field string, fields ...string) *HexInfluenceUpdateOne {
	hiuo.fields = append([]string{field}, fields...)
	return hiuo
}

// Save executes the query and returns the updated HexInfluence entity.
func (hiuo *HexInfluenceUpdateOne) Save(ctx context.Context) (*HexInfluence, error) {
	return withHooks(ctx, hiuo.sqlSave, hiuo.mutation, hiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hiuo *HexInfluenceUpdateOne) SaveX(ctx context.Context) *HexInfluence {
	node, err := hiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (hiuo *HexInfluenceUpdateOne) Exec(ctx context.Context) error {
	_, err := hiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hiuo *HexInfluenceUpdateOne) ExecX(ctx context.Context) {
	if err := hiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hiuo *HexInfluenceUpdateOne) check() error {
	if hiuo.mutation.HexCleared() && len(hiuo.mutation.HexIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "HexInfluence.hex"`)
	}
	if hiuo.mutation.UsersCleared() && len(hiuo.mutation.UsersIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "HexInfluence.users"`)
	}
	return nil
}

func (hiuo *HexInfluenceUpdateOne) sqlSave(ctx context.Context) (_node *HexInfluence, err error) {
	if err := hiuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(hexinfluence.Table, hexinfluence.Columns, sqlgraph.NewFieldSpec(hexinfluence.FieldID, field.TypeUUID))
	id, ok := hiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "HexInfluence.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := hiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hexinfluence.FieldID)
		for _, f := range fields {
			if !hexinfluence.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != hexinfluence.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := hiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hiuo.mutation.Score(); ok {
		_spec.SetField(hexinfluence.FieldScore, field.TypeFloat64, value)
	}
	if value, ok := hiuo.mutation.AddedScore(); ok {
		_spec.AddField(hexinfluence.FieldScore, field.TypeFloat64, value)
	}
	if value, ok := hiuo.mutation.LastUpdated(); ok {
		_spec.SetField(hexinfluence.FieldLastUpdated, field.TypeTime, value)
	}
	if hiuo.mutation.HexCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hexinfluence.HexTable,
			Columns: []string{hexinfluence.HexColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hex.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hiuo.mutation.HexIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hexinfluence.HexTable,
			Columns: []string{hexinfluence.HexColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hex.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hiuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hexinfluence.UsersTable,
			Columns: []string{hexinfluence.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hiuo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hexinfluence.UsersTable,
			Columns: []string{hexinfluence.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &HexInfluence{config: hiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, hiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hexinfluence.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	hiuo.mutation.done = true
	return _node, nil
}
