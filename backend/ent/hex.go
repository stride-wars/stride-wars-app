// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"stride-wars-app/ent/hex"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Hex is the model entity for the Hex schema.
type Hex struct {
	config
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the HexQuery when eager-loading is set.
	Edges        HexEdges `json:"edges"`
	selectValues sql.SelectValues
}

// HexEdges holds the relations/edges for other nodes in the graph.
type HexEdges struct {
	// Hexinfluences holds the value of the hexinfluences edge.
	Hexinfluences []*HexInfluence `json:"hexinfluences,omitempty"`
	// Hexleaderboards holds the value of the hexleaderboards edge.
	Hexleaderboards []*HexLeaderboard `json:"hexleaderboards,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// HexinfluencesOrErr returns the Hexinfluences value or an error if the edge
// was not loaded in eager-loading.
func (e HexEdges) HexinfluencesOrErr() ([]*HexInfluence, error) {
	if e.loadedTypes[0] {
		return e.Hexinfluences, nil
	}
	return nil, &NotLoadedError{edge: "hexinfluences"}
}

// HexleaderboardsOrErr returns the Hexleaderboards value or an error if the edge
// was not loaded in eager-loading.
func (e HexEdges) HexleaderboardsOrErr() ([]*HexLeaderboard, error) {
	if e.loadedTypes[1] {
		return e.Hexleaderboards, nil
	}
	return nil, &NotLoadedError{edge: "hexleaderboards"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Hex) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case hex.FieldID:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Hex fields.
func (h *Hex) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case hex.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			h.ID = int64(value.Int64)
		default:
			h.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Hex.
// This includes values selected through modifiers, order, etc.
func (h *Hex) Value(name string) (ent.Value, error) {
	return h.selectValues.Get(name)
}

// QueryHexinfluences queries the "hexinfluences" edge of the Hex entity.
func (h *Hex) QueryHexinfluences() *HexInfluenceQuery {
	return NewHexClient(h.config).QueryHexinfluences(h)
}

// QueryHexleaderboards queries the "hexleaderboards" edge of the Hex entity.
func (h *Hex) QueryHexleaderboards() *HexLeaderboardQuery {
	return NewHexClient(h.config).QueryHexleaderboards(h)
}

// Update returns a builder for updating this Hex.
// Note that you need to call Hex.Unwrap() before calling this method if this Hex
// was returned from a transaction, and the transaction was committed or rolled back.
func (h *Hex) Update() *HexUpdateOne {
	return NewHexClient(h.config).UpdateOne(h)
}

// Unwrap unwraps the Hex entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (h *Hex) Unwrap() *Hex {
	_tx, ok := h.config.driver.(*txDriver)
	if !ok {
		panic("ent: Hex is not a transactional entity")
	}
	h.config.driver = _tx.drv
	return h
}

// String implements the fmt.Stringer.
func (h *Hex) String() string {
	var builder strings.Builder
	builder.WriteString("Hex(")
	builder.WriteString(fmt.Sprintf("id=%v", h.ID))
	builder.WriteByte(')')
	return builder.String()
}

// Hexes is a parsable slice of Hex.
type Hexes []*Hex
