// Code generated by ent, DO NOT EDIT.

package activity

import (
	"stride-wars-app/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Activity {
	return predicate.Activity(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Activity {
	return predicate.Activity(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Activity {
	return predicate.Activity(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Activity {
	return predicate.Activity(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Activity {
	return predicate.Activity(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Activity {
	return predicate.Activity(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Activity {
	return predicate.Activity(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Activity {
	return predicate.Activity(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Activity {
	return predicate.Activity(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.Activity {
	return predicate.Activity(sql.FieldEQ(FieldUserID, v))
}

// Timestamp applies equality check predicate on the "timestamp" field. It's identical to TimestampEQ.
func Timestamp(v time.Time) predicate.Activity {
	return predicate.Activity(sql.FieldEQ(FieldTimestamp, v))
}

// DurationSeconds applies equality check predicate on the "duration_seconds" field. It's identical to DurationSecondsEQ.
func DurationSeconds(v int) predicate.Activity {
	return predicate.Activity(sql.FieldEQ(FieldDurationSeconds, v))
}

// DistanceMeters applies equality check predicate on the "distance_meters" field. It's identical to DistanceMetersEQ.
func DistanceMeters(v float64) predicate.Activity {
	return predicate.Activity(sql.FieldEQ(FieldDistanceMeters, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Activity {
	return predicate.Activity(sql.FieldEQ(FieldCreatedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.Activity {
	return predicate.Activity(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.Activity {
	return predicate.Activity(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.Activity {
	return predicate.Activity(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.Activity {
	return predicate.Activity(sql.FieldNotIn(FieldUserID, vs...))
}

// TimestampEQ applies the EQ predicate on the "timestamp" field.
func TimestampEQ(v time.Time) predicate.Activity {
	return predicate.Activity(sql.FieldEQ(FieldTimestamp, v))
}

// TimestampNEQ applies the NEQ predicate on the "timestamp" field.
func TimestampNEQ(v time.Time) predicate.Activity {
	return predicate.Activity(sql.FieldNEQ(FieldTimestamp, v))
}

// TimestampIn applies the In predicate on the "timestamp" field.
func TimestampIn(vs ...time.Time) predicate.Activity {
	return predicate.Activity(sql.FieldIn(FieldTimestamp, vs...))
}

// TimestampNotIn applies the NotIn predicate on the "timestamp" field.
func TimestampNotIn(vs ...time.Time) predicate.Activity {
	return predicate.Activity(sql.FieldNotIn(FieldTimestamp, vs...))
}

// TimestampGT applies the GT predicate on the "timestamp" field.
func TimestampGT(v time.Time) predicate.Activity {
	return predicate.Activity(sql.FieldGT(FieldTimestamp, v))
}

// TimestampGTE applies the GTE predicate on the "timestamp" field.
func TimestampGTE(v time.Time) predicate.Activity {
	return predicate.Activity(sql.FieldGTE(FieldTimestamp, v))
}

// TimestampLT applies the LT predicate on the "timestamp" field.
func TimestampLT(v time.Time) predicate.Activity {
	return predicate.Activity(sql.FieldLT(FieldTimestamp, v))
}

// TimestampLTE applies the LTE predicate on the "timestamp" field.
func TimestampLTE(v time.Time) predicate.Activity {
	return predicate.Activity(sql.FieldLTE(FieldTimestamp, v))
}

// DurationSecondsEQ applies the EQ predicate on the "duration_seconds" field.
func DurationSecondsEQ(v int) predicate.Activity {
	return predicate.Activity(sql.FieldEQ(FieldDurationSeconds, v))
}

// DurationSecondsNEQ applies the NEQ predicate on the "duration_seconds" field.
func DurationSecondsNEQ(v int) predicate.Activity {
	return predicate.Activity(sql.FieldNEQ(FieldDurationSeconds, v))
}

// DurationSecondsIn applies the In predicate on the "duration_seconds" field.
func DurationSecondsIn(vs ...int) predicate.Activity {
	return predicate.Activity(sql.FieldIn(FieldDurationSeconds, vs...))
}

// DurationSecondsNotIn applies the NotIn predicate on the "duration_seconds" field.
func DurationSecondsNotIn(vs ...int) predicate.Activity {
	return predicate.Activity(sql.FieldNotIn(FieldDurationSeconds, vs...))
}

// DurationSecondsGT applies the GT predicate on the "duration_seconds" field.
func DurationSecondsGT(v int) predicate.Activity {
	return predicate.Activity(sql.FieldGT(FieldDurationSeconds, v))
}

// DurationSecondsGTE applies the GTE predicate on the "duration_seconds" field.
func DurationSecondsGTE(v int) predicate.Activity {
	return predicate.Activity(sql.FieldGTE(FieldDurationSeconds, v))
}

// DurationSecondsLT applies the LT predicate on the "duration_seconds" field.
func DurationSecondsLT(v int) predicate.Activity {
	return predicate.Activity(sql.FieldLT(FieldDurationSeconds, v))
}

// DurationSecondsLTE applies the LTE predicate on the "duration_seconds" field.
func DurationSecondsLTE(v int) predicate.Activity {
	return predicate.Activity(sql.FieldLTE(FieldDurationSeconds, v))
}

// DistanceMetersEQ applies the EQ predicate on the "distance_meters" field.
func DistanceMetersEQ(v float64) predicate.Activity {
	return predicate.Activity(sql.FieldEQ(FieldDistanceMeters, v))
}

// DistanceMetersNEQ applies the NEQ predicate on the "distance_meters" field.
func DistanceMetersNEQ(v float64) predicate.Activity {
	return predicate.Activity(sql.FieldNEQ(FieldDistanceMeters, v))
}

// DistanceMetersIn applies the In predicate on the "distance_meters" field.
func DistanceMetersIn(vs ...float64) predicate.Activity {
	return predicate.Activity(sql.FieldIn(FieldDistanceMeters, vs...))
}

// DistanceMetersNotIn applies the NotIn predicate on the "distance_meters" field.
func DistanceMetersNotIn(vs ...float64) predicate.Activity {
	return predicate.Activity(sql.FieldNotIn(FieldDistanceMeters, vs...))
}

// DistanceMetersGT applies the GT predicate on the "distance_meters" field.
func DistanceMetersGT(v float64) predicate.Activity {
	return predicate.Activity(sql.FieldGT(FieldDistanceMeters, v))
}

// DistanceMetersGTE applies the GTE predicate on the "distance_meters" field.
func DistanceMetersGTE(v float64) predicate.Activity {
	return predicate.Activity(sql.FieldGTE(FieldDistanceMeters, v))
}

// DistanceMetersLT applies the LT predicate on the "distance_meters" field.
func DistanceMetersLT(v float64) predicate.Activity {
	return predicate.Activity(sql.FieldLT(FieldDistanceMeters, v))
}

// DistanceMetersLTE applies the LTE predicate on the "distance_meters" field.
func DistanceMetersLTE(v float64) predicate.Activity {
	return predicate.Activity(sql.FieldLTE(FieldDistanceMeters, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Activity {
	return predicate.Activity(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Activity {
	return predicate.Activity(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Activity {
	return predicate.Activity(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Activity {
	return predicate.Activity(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Activity {
	return predicate.Activity(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Activity {
	return predicate.Activity(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Activity {
	return predicate.Activity(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Activity {
	return predicate.Activity(sql.FieldLTE(FieldCreatedAt, v))
}

// HasUsers applies the HasEdge predicate on the "users" edge.
func HasUsers() predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UsersTable, UsersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsersWith applies the HasEdge predicate on the "users" edge with a given conditions (other predicates).
func HasUsersWith(preds ...predicate.User) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		step := newUsersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Activity) predicate.Activity {
	return predicate.Activity(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Activity) predicate.Activity {
	return predicate.Activity(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Activity) predicate.Activity {
	return predicate.Activity(sql.NotPredicates(p))
}
