// Code generated by ent, DO NOT EDIT.

package user

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldExternalUser holds the string denoting the external_user field in the database.
	FieldExternalUser = "external_user"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// EdgeActivity holds the string denoting the activity edge name in mutations.
	EdgeActivity = "activity"
	// EdgeFriendship holds the string denoting the friendship edge name in mutations.
	EdgeFriendship = "friendship"
	// EdgeHexinfluence holds the string denoting the hexinfluence edge name in mutations.
	EdgeHexinfluence = "hexinfluence"
	// Table holds the table name of the user in the database.
	Table = "users"
	// ActivityTable is the table that holds the activity relation/edge.
	ActivityTable = "activities"
	// ActivityInverseTable is the table name for the Activity entity.
	// It exists in this package in order to avoid circular dependency with the "activity" package.
	ActivityInverseTable = "activities"
	// ActivityColumn is the table column denoting the activity relation/edge.
	ActivityColumn = "user_id"
	// FriendshipTable is the table that holds the friendship relation/edge.
	FriendshipTable = "friendships"
	// FriendshipInverseTable is the table name for the Friendship entity.
	// It exists in this package in order to avoid circular dependency with the "friendship" package.
	FriendshipInverseTable = "friendships"
	// FriendshipColumn is the table column denoting the friendship relation/edge.
	FriendshipColumn = "user_id"
	// HexinfluenceTable is the table that holds the hexinfluence relation/edge.
	HexinfluenceTable = "hex_influences"
	// HexinfluenceInverseTable is the table name for the HexInfluence entity.
	// It exists in this package in order to avoid circular dependency with the "hexinfluence" package.
	HexinfluenceInverseTable = "hex_influences"
	// HexinfluenceColumn is the table column denoting the hexinfluence relation/edge.
	HexinfluenceColumn = "user_id"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldExternalUser,
	FieldUsername,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByExternalUser orders the results by the external_user field.
func ByExternalUser(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExternalUser, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByActivityCount orders the results by activity count.
func ByActivityCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newActivityStep(), opts...)
	}
}

// ByActivity orders the results by activity terms.
func ByActivity(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newActivityStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByFriendshipCount orders the results by friendship count.
func ByFriendshipCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFriendshipStep(), opts...)
	}
}

// ByFriendship orders the results by friendship terms.
func ByFriendship(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFriendshipStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByHexinfluenceCount orders the results by hexinfluence count.
func ByHexinfluenceCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newHexinfluenceStep(), opts...)
	}
}

// ByHexinfluence orders the results by hexinfluence terms.
func ByHexinfluence(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHexinfluenceStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newActivityStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ActivityInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, ActivityTable, ActivityColumn),
	)
}
func newFriendshipStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FriendshipInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, FriendshipTable, FriendshipColumn),
	)
}
func newHexinfluenceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HexinfluenceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, HexinfluenceTable, HexinfluenceColumn),
	)
}
