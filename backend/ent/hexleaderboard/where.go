// Code generated by ent, DO NOT EDIT.

package hexleaderboard

import (
	"stride-wars-app/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.HexLeaderboard {
	return predicate.HexLeaderboard(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.HexLeaderboard {
	return predicate.HexLeaderboard(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.HexLeaderboard {
	return predicate.HexLeaderboard(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.HexLeaderboard {
	return predicate.HexLeaderboard(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.HexLeaderboard {
	return predicate.HexLeaderboard(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.HexLeaderboard {
	return predicate.HexLeaderboard(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.HexLeaderboard {
	return predicate.HexLeaderboard(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.HexLeaderboard {
	return predicate.HexLeaderboard(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.HexLeaderboard {
	return predicate.HexLeaderboard(sql.FieldLTE(FieldID, id))
}

// H3Index applies equality check predicate on the "h3_index" field. It's identical to H3IndexEQ.
func H3Index(v string) predicate.HexLeaderboard {
	return predicate.HexLeaderboard(sql.FieldEQ(FieldH3Index, v))
}

// H3IndexEQ applies the EQ predicate on the "h3_index" field.
func H3IndexEQ(v string) predicate.HexLeaderboard {
	return predicate.HexLeaderboard(sql.FieldEQ(FieldH3Index, v))
}

// H3IndexNEQ applies the NEQ predicate on the "h3_index" field.
func H3IndexNEQ(v string) predicate.HexLeaderboard {
	return predicate.HexLeaderboard(sql.FieldNEQ(FieldH3Index, v))
}

// H3IndexIn applies the In predicate on the "h3_index" field.
func H3IndexIn(vs ...string) predicate.HexLeaderboard {
	return predicate.HexLeaderboard(sql.FieldIn(FieldH3Index, vs...))
}

// H3IndexNotIn applies the NotIn predicate on the "h3_index" field.
func H3IndexNotIn(vs ...string) predicate.HexLeaderboard {
	return predicate.HexLeaderboard(sql.FieldNotIn(FieldH3Index, vs...))
}

// H3IndexGT applies the GT predicate on the "h3_index" field.
func H3IndexGT(v string) predicate.HexLeaderboard {
	return predicate.HexLeaderboard(sql.FieldGT(FieldH3Index, v))
}

// H3IndexGTE applies the GTE predicate on the "h3_index" field.
func H3IndexGTE(v string) predicate.HexLeaderboard {
	return predicate.HexLeaderboard(sql.FieldGTE(FieldH3Index, v))
}

// H3IndexLT applies the LT predicate on the "h3_index" field.
func H3IndexLT(v string) predicate.HexLeaderboard {
	return predicate.HexLeaderboard(sql.FieldLT(FieldH3Index, v))
}

// H3IndexLTE applies the LTE predicate on the "h3_index" field.
func H3IndexLTE(v string) predicate.HexLeaderboard {
	return predicate.HexLeaderboard(sql.FieldLTE(FieldH3Index, v))
}

// H3IndexContains applies the Contains predicate on the "h3_index" field.
func H3IndexContains(v string) predicate.HexLeaderboard {
	return predicate.HexLeaderboard(sql.FieldContains(FieldH3Index, v))
}

// H3IndexHasPrefix applies the HasPrefix predicate on the "h3_index" field.
func H3IndexHasPrefix(v string) predicate.HexLeaderboard {
	return predicate.HexLeaderboard(sql.FieldHasPrefix(FieldH3Index, v))
}

// H3IndexHasSuffix applies the HasSuffix predicate on the "h3_index" field.
func H3IndexHasSuffix(v string) predicate.HexLeaderboard {
	return predicate.HexLeaderboard(sql.FieldHasSuffix(FieldH3Index, v))
}

// H3IndexEqualFold applies the EqualFold predicate on the "h3_index" field.
func H3IndexEqualFold(v string) predicate.HexLeaderboard {
	return predicate.HexLeaderboard(sql.FieldEqualFold(FieldH3Index, v))
}

// H3IndexContainsFold applies the ContainsFold predicate on the "h3_index" field.
func H3IndexContainsFold(v string) predicate.HexLeaderboard {
	return predicate.HexLeaderboard(sql.FieldContainsFold(FieldH3Index, v))
}

// HasHex applies the HasEdge predicate on the "hex" edge.
func HasHex() predicate.HexLeaderboard {
	return predicate.HexLeaderboard(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, HexTable, HexColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHexWith applies the HasEdge predicate on the "hex" edge with a given conditions (other predicates).
func HasHexWith(preds ...predicate.Hex) predicate.HexLeaderboard {
	return predicate.HexLeaderboard(func(s *sql.Selector) {
		step := newHexStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.HexLeaderboard) predicate.HexLeaderboard {
	return predicate.HexLeaderboard(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.HexLeaderboard) predicate.HexLeaderboard {
	return predicate.HexLeaderboard(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.HexLeaderboard) predicate.HexLeaderboard {
	return predicate.HexLeaderboard(sql.NotPredicates(p))
}
