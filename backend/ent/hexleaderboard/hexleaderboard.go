// Code generated by ent, DO NOT EDIT.

package hexleaderboard

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the hexleaderboard type in the database.
	Label = "hex_leaderboard"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldH3Index holds the string denoting the h3_index field in the database.
	FieldH3Index = "h3_index"
	// FieldTopUsers holds the string denoting the top_users field in the database.
	FieldTopUsers = "top_users"
	// EdgeHex holds the string denoting the hex edge name in mutations.
	EdgeHex = "hex"
	// Table holds the table name of the hexleaderboard in the database.
	Table = "hex_leaderboards"
	// HexTable is the table that holds the hex relation/edge.
	HexTable = "hex_leaderboards"
	// HexInverseTable is the table name for the Hex entity.
	// It exists in this package in order to avoid circular dependency with the "hex" package.
	HexInverseTable = "hexes"
	// HexColumn is the table column denoting the hex relation/edge.
	HexColumn = "h3_index"
)

// Columns holds all SQL columns for hexleaderboard fields.
var Columns = []string{
	FieldID,
	FieldH3Index,
	FieldTopUsers,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the HexLeaderboard queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByH3Index orders the results by the h3_index field.
func ByH3Index(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldH3Index, opts...).ToFunc()
}

// ByHexField orders the results by hex field.
func ByHexField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHexStep(), sql.OrderByField(field, opts...))
	}
}
func newHexStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HexInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, HexTable, HexColumn),
	)
}
