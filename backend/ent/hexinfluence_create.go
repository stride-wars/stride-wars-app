// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"stride-wars-app/ent/hex"
	"stride-wars-app/ent/hexinfluence"
	"stride-wars-app/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// HexInfluenceCreate is the builder for creating a HexInfluence entity.
type HexInfluenceCreate struct {
	config
	mutation *HexInfluenceMutation
	hooks    []Hook
}

// SetH3Index sets the "h3_index" field.
func (hic *HexInfluenceCreate) SetH3Index(i int64) *HexInfluenceCreate {
	hic.mutation.SetH3Index(i)
	return hic
}

// SetUserID sets the "user_id" field.
func (hic *HexInfluenceCreate) SetUserID(u uuid.UUID) *HexInfluenceCreate {
	hic.mutation.SetUserID(u)
	return hic
}

// SetScore sets the "score" field.
func (hic *HexInfluenceCreate) SetScore(f float64) *HexInfluenceCreate {
	hic.mutation.SetScore(f)
	return hic
}

// SetLastUpdated sets the "last_updated" field.
func (hic *HexInfluenceCreate) SetLastUpdated(t time.Time) *HexInfluenceCreate {
	hic.mutation.SetLastUpdated(t)
	return hic
}

// SetHexID sets the "hex" edge to the Hex entity by ID.
func (hic *HexInfluenceCreate) SetHexID(id int64) *HexInfluenceCreate {
	hic.mutation.SetHexID(id)
	return hic
}

// SetHex sets the "hex" edge to the Hex entity.
func (hic *HexInfluenceCreate) SetHex(h *Hex) *HexInfluenceCreate {
	return hic.SetHexID(h.ID)
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (hic *HexInfluenceCreate) SetUsersID(id uuid.UUID) *HexInfluenceCreate {
	hic.mutation.SetUsersID(id)
	return hic
}

// SetUsers sets the "users" edge to the User entity.
func (hic *HexInfluenceCreate) SetUsers(u *User) *HexInfluenceCreate {
	return hic.SetUsersID(u.ID)
}

// Mutation returns the HexInfluenceMutation object of the builder.
func (hic *HexInfluenceCreate) Mutation() *HexInfluenceMutation {
	return hic.mutation
}

// Save creates the HexInfluence in the database.
func (hic *HexInfluenceCreate) Save(ctx context.Context) (*HexInfluence, error) {
	return withHooks(ctx, hic.sqlSave, hic.mutation, hic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (hic *HexInfluenceCreate) SaveX(ctx context.Context) *HexInfluence {
	v, err := hic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hic *HexInfluenceCreate) Exec(ctx context.Context) error {
	_, err := hic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hic *HexInfluenceCreate) ExecX(ctx context.Context) {
	if err := hic.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hic *HexInfluenceCreate) check() error {
	if _, ok := hic.mutation.H3Index(); !ok {
		return &ValidationError{Name: "h3_index", err: errors.New(`ent: missing required field "HexInfluence.h3_index"`)}
	}
	if _, ok := hic.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "HexInfluence.user_id"`)}
	}
	if _, ok := hic.mutation.Score(); !ok {
		return &ValidationError{Name: "score", err: errors.New(`ent: missing required field "HexInfluence.score"`)}
	}
	if _, ok := hic.mutation.LastUpdated(); !ok {
		return &ValidationError{Name: "last_updated", err: errors.New(`ent: missing required field "HexInfluence.last_updated"`)}
	}
	if len(hic.mutation.HexIDs()) == 0 {
		return &ValidationError{Name: "hex", err: errors.New(`ent: missing required edge "HexInfluence.hex"`)}
	}
	if len(hic.mutation.UsersIDs()) == 0 {
		return &ValidationError{Name: "users", err: errors.New(`ent: missing required edge "HexInfluence.users"`)}
	}
	return nil
}

func (hic *HexInfluenceCreate) sqlSave(ctx context.Context) (*HexInfluence, error) {
	if err := hic.check(); err != nil {
		return nil, err
	}
	_node, _spec := hic.createSpec()
	if err := sqlgraph.CreateNode(ctx, hic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	hic.mutation.id = &_node.ID
	hic.mutation.done = true
	return _node, nil
}

func (hic *HexInfluenceCreate) createSpec() (*HexInfluence, *sqlgraph.CreateSpec) {
	var (
		_node = &HexInfluence{config: hic.config}
		_spec = sqlgraph.NewCreateSpec(hexinfluence.Table, sqlgraph.NewFieldSpec(hexinfluence.FieldID, field.TypeInt))
	)
	if value, ok := hic.mutation.Score(); ok {
		_spec.SetField(hexinfluence.FieldScore, field.TypeFloat64, value)
		_node.Score = value
	}
	if value, ok := hic.mutation.LastUpdated(); ok {
		_spec.SetField(hexinfluence.FieldLastUpdated, field.TypeTime, value)
		_node.LastUpdated = value
	}
	if nodes := hic.mutation.HexIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hexinfluence.HexTable,
			Columns: []string{hexinfluence.HexColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hex.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.H3Index = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hic.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hexinfluence.UsersTable,
			Columns: []string{hexinfluence.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// HexInfluenceCreateBulk is the builder for creating many HexInfluence entities in bulk.
type HexInfluenceCreateBulk struct {
	config
	err      error
	builders []*HexInfluenceCreate
}

// Save creates the HexInfluence entities in the database.
func (hicb *HexInfluenceCreateBulk) Save(ctx context.Context) ([]*HexInfluence, error) {
	if hicb.err != nil {
		return nil, hicb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(hicb.builders))
	nodes := make([]*HexInfluence, len(hicb.builders))
	mutators := make([]Mutator, len(hicb.builders))
	for i := range hicb.builders {
		func(i int, root context.Context) {
			builder := hicb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HexInfluenceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, hicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, hicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, hicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (hicb *HexInfluenceCreateBulk) SaveX(ctx context.Context) []*HexInfluence {
	v, err := hicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hicb *HexInfluenceCreateBulk) Exec(ctx context.Context) error {
	_, err := hicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hicb *HexInfluenceCreateBulk) ExecX(ctx context.Context) {
	if err := hicb.Exec(ctx); err != nil {
		panic(err)
	}
}
