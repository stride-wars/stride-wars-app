// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"stride-wars-app/ent/hex"
	"stride-wars-app/ent/hexleaderboard"
	"stride-wars-app/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// HexLeaderboardUpdate is the builder for updating HexLeaderboard entities.
type HexLeaderboardUpdate struct {
	config
	hooks    []Hook
	mutation *HexLeaderboardMutation
}

// Where appends a list predicates to the HexLeaderboardUpdate builder.
func (hlu *HexLeaderboardUpdate) Where(ps ...predicate.HexLeaderboard) *HexLeaderboardUpdate {
	hlu.mutation.Where(ps...)
	return hlu
}

// SetH3Index sets the "h3_index" field.
func (hlu *HexLeaderboardUpdate) SetH3Index(s string) *HexLeaderboardUpdate {
	hlu.mutation.SetH3Index(s)
	return hlu
}

// SetNillableH3Index sets the "h3_index" field if the given value is not nil.
func (hlu *HexLeaderboardUpdate) SetNillableH3Index(s *string) *HexLeaderboardUpdate {
	if s != nil {
		hlu.SetH3Index(*s)
	}
	return hlu
}

// SetTopUsers sets the "top_users" field.
func (hlu *HexLeaderboardUpdate) SetTopUsers(m map[string][]uuid.UUID) *HexLeaderboardUpdate {
	hlu.mutation.SetTopUsers(m)
	return hlu
}

// SetHexID sets the "hex" edge to the Hex entity by ID.
func (hlu *HexLeaderboardUpdate) SetHexID(id string) *HexLeaderboardUpdate {
	hlu.mutation.SetHexID(id)
	return hlu
}

// SetHex sets the "hex" edge to the Hex entity.
func (hlu *HexLeaderboardUpdate) SetHex(h *Hex) *HexLeaderboardUpdate {
	return hlu.SetHexID(h.ID)
}

// Mutation returns the HexLeaderboardMutation object of the builder.
func (hlu *HexLeaderboardUpdate) Mutation() *HexLeaderboardMutation {
	return hlu.mutation
}

// ClearHex clears the "hex" edge to the Hex entity.
func (hlu *HexLeaderboardUpdate) ClearHex() *HexLeaderboardUpdate {
	hlu.mutation.ClearHex()
	return hlu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hlu *HexLeaderboardUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, hlu.sqlSave, hlu.mutation, hlu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hlu *HexLeaderboardUpdate) SaveX(ctx context.Context) int {
	affected, err := hlu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hlu *HexLeaderboardUpdate) Exec(ctx context.Context) error {
	_, err := hlu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hlu *HexLeaderboardUpdate) ExecX(ctx context.Context) {
	if err := hlu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hlu *HexLeaderboardUpdate) check() error {
	if hlu.mutation.HexCleared() && len(hlu.mutation.HexIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "HexLeaderboard.hex"`)
	}
	return nil
}

func (hlu *HexLeaderboardUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := hlu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(hexleaderboard.Table, hexleaderboard.Columns, sqlgraph.NewFieldSpec(hexleaderboard.FieldID, field.TypeInt))
	if ps := hlu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hlu.mutation.TopUsers(); ok {
		_spec.SetField(hexleaderboard.FieldTopUsers, field.TypeJSON, value)
	}
	if hlu.mutation.HexCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hexleaderboard.HexTable,
			Columns: []string{hexleaderboard.HexColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hex.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hlu.mutation.HexIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hexleaderboard.HexTable,
			Columns: []string{hexleaderboard.HexColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hex.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hlu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hexleaderboard.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	hlu.mutation.done = true
	return n, nil
}

// HexLeaderboardUpdateOne is the builder for updating a single HexLeaderboard entity.
type HexLeaderboardUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HexLeaderboardMutation
}

// SetH3Index sets the "h3_index" field.
func (hluo *HexLeaderboardUpdateOne) SetH3Index(s string) *HexLeaderboardUpdateOne {
	hluo.mutation.SetH3Index(s)
	return hluo
}

// SetNillableH3Index sets the "h3_index" field if the given value is not nil.
func (hluo *HexLeaderboardUpdateOne) SetNillableH3Index(s *string) *HexLeaderboardUpdateOne {
	if s != nil {
		hluo.SetH3Index(*s)
	}
	return hluo
}

// SetTopUsers sets the "top_users" field.
func (hluo *HexLeaderboardUpdateOne) SetTopUsers(m map[string][]uuid.UUID) *HexLeaderboardUpdateOne {
	hluo.mutation.SetTopUsers(m)
	return hluo
}

// SetHexID sets the "hex" edge to the Hex entity by ID.
func (hluo *HexLeaderboardUpdateOne) SetHexID(id string) *HexLeaderboardUpdateOne {
	hluo.mutation.SetHexID(id)
	return hluo
}

// SetHex sets the "hex" edge to the Hex entity.
func (hluo *HexLeaderboardUpdateOne) SetHex(h *Hex) *HexLeaderboardUpdateOne {
	return hluo.SetHexID(h.ID)
}

// Mutation returns the HexLeaderboardMutation object of the builder.
func (hluo *HexLeaderboardUpdateOne) Mutation() *HexLeaderboardMutation {
	return hluo.mutation
}

// ClearHex clears the "hex" edge to the Hex entity.
func (hluo *HexLeaderboardUpdateOne) ClearHex() *HexLeaderboardUpdateOne {
	hluo.mutation.ClearHex()
	return hluo
}

// Where appends a list predicates to the HexLeaderboardUpdate builder.
func (hluo *HexLeaderboardUpdateOne) Where(ps ...predicate.HexLeaderboard) *HexLeaderboardUpdateOne {
	hluo.mutation.Where(ps...)
	return hluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (hluo *HexLeaderboardUpdateOne) Select(field string, fields ...string) *HexLeaderboardUpdateOne {
	hluo.fields = append([]string{field}, fields...)
	return hluo
}

// Save executes the query and returns the updated HexLeaderboard entity.
func (hluo *HexLeaderboardUpdateOne) Save(ctx context.Context) (*HexLeaderboard, error) {
	return withHooks(ctx, hluo.sqlSave, hluo.mutation, hluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hluo *HexLeaderboardUpdateOne) SaveX(ctx context.Context) *HexLeaderboard {
	node, err := hluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (hluo *HexLeaderboardUpdateOne) Exec(ctx context.Context) error {
	_, err := hluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hluo *HexLeaderboardUpdateOne) ExecX(ctx context.Context) {
	if err := hluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hluo *HexLeaderboardUpdateOne) check() error {
	if hluo.mutation.HexCleared() && len(hluo.mutation.HexIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "HexLeaderboard.hex"`)
	}
	return nil
}

func (hluo *HexLeaderboardUpdateOne) sqlSave(ctx context.Context) (_node *HexLeaderboard, err error) {
	if err := hluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(hexleaderboard.Table, hexleaderboard.Columns, sqlgraph.NewFieldSpec(hexleaderboard.FieldID, field.TypeInt))
	id, ok := hluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "HexLeaderboard.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := hluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hexleaderboard.FieldID)
		for _, f := range fields {
			if !hexleaderboard.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != hexleaderboard.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := hluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hluo.mutation.TopUsers(); ok {
		_spec.SetField(hexleaderboard.FieldTopUsers, field.TypeJSON, value)
	}
	if hluo.mutation.HexCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hexleaderboard.HexTable,
			Columns: []string{hexleaderboard.HexColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hex.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hluo.mutation.HexIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hexleaderboard.HexTable,
			Columns: []string{hexleaderboard.HexColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hex.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &HexLeaderboard{config: hluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, hluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hexleaderboard.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	hluo.mutation.done = true
	return _node, nil
}
